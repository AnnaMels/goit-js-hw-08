{"version":3,"sources":["../debounce.js","../throttle.js","js/03-feedback.js"],"names":["delay","callback","options","timeoutID","noTrailing","noLeading","debounceMode","undefined","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","arguments_","self","elapsed","Date","now","exec","apply","clear","setTimeout","cancel","upcomingOnly","atBegin","throttle","form","document","querySelector","input","textarea","LOCALSRORAGE_KEY","savedData","localStorage","getItem","parsedData","JSON","parse","onPageLoad","value","email","message","onFormInput","userData","setItem","stringify","onFormSubmit","e","preventDefault","console","log","reset","removeItem","addEventListener"],"mappings":";AAsBC,aCCc,SAAA,EAAUA,EAAOC,EAAUC,GAKrCA,IAMAC,EANAD,EAAAA,GAAW,GAJf,EAAA,EACCE,WAAAA,OADD,IAAA,GAAA,EAAA,EAAA,EAECC,UAAAA,OAFD,IAAA,GAAA,EAAA,EAAA,EAGCC,aAAAA,OAHD,IAAA,OAGgBC,EAHhB,EAWIC,GAAY,EAGZC,EAAW,EAGNC,SAAAA,IACJP,GACHQ,aAAaR,GAgBNS,SAAAA,IAAuB,IAAA,IAAA,EAAA,UAAA,OAAZC,EAAY,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAZA,EAAY,GAAA,UAAA,GAC3BC,IAAAA,EAAO,KACPC,EAAUC,KAAKC,MAAQR,EAOlBS,SAAAA,IACRT,EAAWO,KAAKC,MAChBhB,EAASkB,MAAML,EAAMD,GAObO,SAAAA,IACRjB,OAAYI,EAfTC,IAkBCH,IAAaC,GAAiBH,GAMlCe,IAGDR,SAEqBH,IAAjBD,GAA8BS,EAAUf,EACvCK,GAMHI,EAAWO,KAAKC,MACXb,IACJD,EAAYkB,WAAWf,EAAec,EAAQF,EAAMlB,KAOrDkB,KAEwB,IAAfd,IAYVD,EAAYkB,WACXf,EAAec,EAAQF,OACNX,IAAjBD,EAA6BN,EAAQe,EAAUf,KAQ3CY,OAHPA,EAAQU,OAjFCA,SAAOpB,GACkBA,IAAjC,GAAiCA,GAAW,IAApCqB,aAAAA,OAAR,IAAA,GAAA,EACAb,IACAF,GAAae,GAiFPX,EDjHO,SAAA,EAAUZ,EAAOC,EAAUC,GACbA,IAA5B,GAA4BA,GAAW,IAA/BsB,QACDC,OAAAA,EAASzB,EAAOC,EAAU,CAAEK,cAA0B,UAD7D,IAAA,GAAA,KAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,SAAA;;AEeA,aArCD,IAAA,EAAA,QAAA,qBAEA,MAAMoB,EAAOC,SAASC,cAAc,kBAC9BC,EAAQF,SAASC,cAAc,SAC/BE,EAAWH,SAASC,cAAc,YAClCG,EAAmB,sBACnBC,EAAYC,aAAaC,QAAQH,GACjCI,EAAaC,KAAKC,MAAML,IAAc,GAQ5C,SAASM,IACDN,IACJH,EAAMU,MAAQJ,EAAWK,MACzBV,EAASS,MAAQJ,EAAWM,SAKhC,SAASC,IACCC,MAAAA,EAAW,CACbH,MAAOX,EAAMU,MACbE,QAASX,EAASS,OAE1BN,aAAaW,QAAQb,EAAkBK,KAAKS,UAAUF,IAGtD,SAASG,EAAaC,GAClBA,EAAEC,iBAEFC,QAAQC,IAAId,KAAKC,MAAMJ,aAAaC,QAAQH,KAC5CL,EAAKyB,QACLlB,aAAamB,WAAWrB,GA1B5BL,EAAK2B,iBAAiB,SAAUP,GAChCpB,EAAK2B,iBAAiB,SAAS,EAAS,EAAA,UAAA,IAAKX,IAE7CJ","file":"03-feedback.537c0c39.js","sourceRoot":"../src","sourcesContent":["/* eslint-disable no-undefined */\n\nimport throttle from './throttle.js';\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\nexport default function (delay, callback, options) {\n\tconst { atBegin = false } = options || {};\n\treturn throttle(delay, callback, { debounceMode: atBegin !== false });\n}\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n","import { throttle } from 'throttle-debounce';\n\nconst form = document.querySelector('.feedback-form');\nconst input = document.querySelector('input');\nconst textarea = document.querySelector('textarea');\nconst LOCALSRORAGE_KEY = 'feedback-form-state';\nconst savedData = localStorage.getItem(LOCALSRORAGE_KEY); \nconst parsedData = JSON.parse(savedData) || {}; \n\n\nform.addEventListener('submit', onFormSubmit);\nform.addEventListener('input', throttle(500, onFormInput));\n\nonPageLoad();\n\nfunction onPageLoad() {\n    if (savedData) {\n    input.value = parsedData.email;\n    textarea.value = parsedData.message;\n};\n}\n\n\nfunction onFormInput() {\n    const userData = {\n        email: input.value,\n        message: textarea.value,\n    };\nlocalStorage.setItem(LOCALSRORAGE_KEY, JSON.stringify(userData));     \n};\n\nfunction onFormSubmit(e) {\n    e.preventDefault();\n\n    console.log(JSON.parse(localStorage.getItem(LOCALSRORAGE_KEY)));\n    form.reset();\n    localStorage.removeItem(LOCALSRORAGE_KEY);\n};\n\n\n\n"]}